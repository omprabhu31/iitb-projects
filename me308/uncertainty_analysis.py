import numpy as np
import matplotlib.pyplot as plt
import seaborn as sb
import random

beta=np.array([[[0.964655, 0.228241, 0.0515152, 0.051534, 0.352315, 0.139823, 0.089846, 0.0666667, 0.656098],
        [0.026724, 0.314352, 0.095452,0.247222,0.041637, 0.403097,0.078695,0.812546,0.047213],
        [0.015848, 0.125484, 0.051416, 0.623481, 0.143981, 0.015324, 0.425760, 0.087462, 0.141635]],

       [[0.025503,0.569492, 0.305056, 0.298377,0.0553957, 0.284975, 0.274806,0.0666667, 0.354545],
        [0.210084,0.032740, 0.407022, 0.102273, 0.729137, 0.096031, 0.334104, 0.734783, 0.532111 ],
        [0.080147, 0.011452,  0.119382, 0.157792,0.157463, 0.187192,0.124806, 0.184058, 0.009778]],

       [[0.084161,0.129365,0.055318,0.741255,0.021212, 0.415520, 0.742314,0.136842,0.243752 ],
        [0.048631,0.001364, 0.074182,0.079681,0.100412 , 0.325287,0.014935,0.074763, 0.642477],
        [0.715456,0.614286, 0.634471,0.063265, 0.361538, 0.095024,0.061290,0.524694, 0.032748]]])

A=np.array([[20,60,100,50,52,49,78,43,13],
       [20,52,43,81,36,110,84,14,35],
       [20,19,50,37,31,46,48,25,17]])

D=np.array([[15,15,25,59,67,14,8,31,37],
       [15,148,86,116,106,58,68,35,58],
       [15,18,21,30,37,10,27,11,23]])

B = np.array([[[0.942241, 0.228241,	0.0515152,	0.05,	0.05,	0.05,	0.0573034,	0.0666667,	0.656098],
               [0.80431, 0.314352,	0.05,	0.247222,	0.446296,	0.49292,	0.05,	0.05,	0.05],
               [0.062931, 0.05,	0.05,	0.05,	0.05,	0.05,	0.05,	0.05,	0.05]],
              
              [[0.05,	0.569492,	0.305056,	0.298377,	0.290288,	0.216995,	0.264341,	0.114493,	0.354545],
               [0.05,	0.05,	0.407022,	0.0980519,	0.421223,	0.11798,	0.05,	0.734783,	0.05],
               [0.05,	0.05,	0.119382,	0.162013,	0.123022,	0.187192,	0.135271,	0.136232,	0.05]],
             
              [[0.05,	0.129365,	0.05,	0.05,	0.05,	0.325287,	0.0612903,	0.05,	0.24375],
               [0.05,	0.05,	0.05,	0.0632653,	0.05,	0.05,	0.05,	0.05,	0.05],
               [0.05,	0.614286,	0.15,	0.05,	0.361538,	0.05,	0.05,	0.136842,	0.05]]])

a = np.array([[20,	60,	100,	50,	52,	49,	78,	43,	13],
              [20,	52,	43,	81,	36,	110,	84,	14,	35],
              [20,	9,	50,	37,	31,	46,	48,	25,	17]])

d= np.array([[15,	15,	25,	59,	67,	14,	8,	31,	37],
             [15,	148,	86,	116,	106,	58,	68,	35,	58],
             [15,	18,	8,	30,	37,	10,	9,	11,	23]])

Cg_mean=np.array([0.46,0.68,0.25])
Ca_mean=np.array([0.56,0.75,0.41])

x_mean=np.array([[58, 108, 99,	72,	108,	113,	89,	48,	41],
            [68,	118,	178,	154,	139,	203,	129,	69,	77],
            [39,	63,	72,	49,	65,	87,	62,	38,	32]])

Ar_Lim_mean = np.array([[60,	100,	50,	75,	70,	100,	50,	30],
                        [60, 125,	100,	100,	110,	125,	55,	35],
                        [35,	50,	40,	40,	55,	55,	25,	25]])

Dept_Lim_mean = np.array([[91,	74,	59,	67,	64,	63,	31,	37],
                          [176,	130,	116,	106,	137,	82,	35,	58],
                          [50,	49,	30,	37,	47,	32,	20,	23]])

SchDept_mean = np.array([[70,	60,	60,	50,	60,	54,	20,	20],
                         [150,	110,	100,	100,	120,	70,	25,	30],
                         [50,	30,	20,	25,	30,	16,	14,	10]])

Cap_mean = np.array([[125,	150,	125,	125,	125,	150,	85,	50],
                     [200,	250,	200,	200,	250,	200,	100,	100],
                     [75,	100, 75,	75,	100,	100,	50,	40]])

def costfn(beta,A,D,Cg,Ca,SchDept,x):
  a=0
  for i in range(3):
    for k in range(8):
      a+= Cg[i]*(SchDept[i][k]-D[i][k+1])
  b=0
  for i in range(3):
    for k in range(8):
      c=0
      for j in range(3):
        c+=beta[j][i][k]*x[j][k]
      b+= Ca[i]*(c-A[i][k+1])
  
  return a+b

cost_mean = costfn(B,a,d,Cg_mean,Ca_mean,SchDept_mean,x_mean)
#print(cost_mean)

noises = []
costs = []
add_cost = [14.72,16.83,18.92,19.41,17.68,16.22,20]
add_noise = [-10.1,-9.2,-8.1,-7.1,-6.3,-5.2,-4.5,-3.4,-2.6,-1.7,0,1.3,2.7,3.3,4.5,5.2,6.3,7.1,8.1,9,10.2]
for i in range(-10,20):
  x=(x_mean+(i*.1)).astype(int)
  SchDept = (SchDept_mean+(i*.1)).astype(int)
  m=costfn(B,a,d,Cg_mean, Ca_mean, SchDept,x)
  noises.append(i*0.1)
  costs.append(m)
print(costs)
print(noises)
for i in range (10):
  costs[i] = costs[i] + random.choice(add_cost)
  noises[i] = noises[i] + add_noise[i]
  noises[i+10] = noises[i+10] + add_noise[i+10]
#print(costs)
#print(noises)

#sb.lineplot(x=noises,y=costs)

def pdf_gaussian(x,mu,sigma):
  a=(x-mu)/sigma
  b = np.exp(-0.5*a*a)/(sigma*np.sqrt(2*np.pi))
  return b

#pdf_gaussian(98,100,12)

noises=[]
cost_new = []

l=np.linspace(1,10,10)
for std in l:
  m=0
  for _ in range(10):
    noise = np.random.normal(0,std)
    x = (x_mean+noise).astype(int)
    SchDept = (SchDept_mean+noise).astype(int)
    cost = costfn(B,a,d,Cg_mean, Ca_mean, SchDept,x)
    m = m + pdf_gaussian(noise,0,std)*(cost)
  cost_new.append(m)

#print(cost_new)
#print(np.linspace(1,11,10))

plt.figure(figsize=(12,8))
l=np.linspace(1,11,10)
sb.set(style="ticks")
plt.grid()
plt.xlabel("Standard Deviation of Gaussian Noise",size=15)
plt.ylabel("Expected Objective Function Value",size=15)
sb.lineplot(x=l,y=cost_new)
plt.show()